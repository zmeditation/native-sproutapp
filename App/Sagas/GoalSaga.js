/* eslint-disable no-trailing-spaces,padded-blocks,key-spacing,no-multiple-empty-lines,no-unused-vars */
/**
 * Created by victorchoudhary on 15/05/17.
 */

import {put, call}
  from 'redux-saga/effects'
import {GoalActions}
  from '../Redux/Reducers/GoalReducer'
import {UserActions}
  from '../Redux/Reducers/UserReducer'
import {SettingActions}
  from '../Redux/Reducers/SettingReducer'
import {addGoalDataDissector, editGoalDataDissector}
  from '../Utility/Dissector/GoalDataDissector'
import {addGoalFormat, editGoalFormat}
  from '../Utility/Formatter/GoalDataFormatter'
import PHANTOM from '../Utility/Phantom'
import {GOAL_ENTITIES}
  from '../Utility/Mapper/Goal'
import {USER_ENTITIES}
  from '../Utility/Mapper/User'
import {CHILD_ENTITIES}
  from '../Utility/Mapper/Child'
import {COMMON_ENTITIES, FREQUENCY}
  from '../Utility/Mapper/Common'
import {analytics}
  from '../Config/AppConfig'
import {SEGMENT_ACTIONS}
  from '../Config/contants'

/*
  addGoal.

  This saga is used for sending POST request to Goal API Endpoint.
  Execution of this method takes place in 4 steps :-
  STEP 1.
  - formulate body payload
  - if any fields are missing, will throw error
  STEP 2.
  - send api request if payload formulated correctly
  STEP 3.
  - if response OK, then dissects the response data
  - and if data is as per format with required field
  STEP 4.
  - IF data is as per format & required fields are not
  - missing, then dispatches ADD_GOAL_SUCCESS event
  - ELSE if integrity is lost or response is NOT 'OK'
  - it dispatches ADD_GOAL_FAILURE event

  @parameter api 'api service used to send request to Backend'
  @parameter action 'action {type, payload}
 */
export function * addCustomGoal (mutation, action) {
  let response
  var sendError = false

  try {
    PHANTOM.assertActionPayload(action)
    response = yield call(mutation, action)
  } catch (err) {
    console.log('error in calling addChild : ', err)
  }

  if (response && response.data) {
    console.log('got goal data in saga :: ', response.data)
    let data = response.data.createGoal.goal
    let title = action[CHILD_ENTITIES.FIRST_NAME] + '\'s '
    title += data['name'] + ' Fund'

    const riskSelected = action[GOAL_ENTITIES.RISK_SELECTED]
    console.log('------ RISK SELECTED ______ ::: ', riskSelected)
    yield put(GoalActions.addCustomGoalSuccess(
      data.sprout['sprout_id'],
      data['goal_id'],
      data['name'],
      action[COMMON_ENTITIES.NAVIGATOR],
      title,
      action[USER_ENTITIES.USER_ID],
      riskSelected
    ))
  } else {
    // console.log('inside error : ', response)
    sendError = true
  }

  if (sendError) {
    let error = {
      status: '402',
      code: 'testing error',
      message: 'no message yet'
    }
    yield put(GoalActions.addCustomGoalFailure(error))
  }

}

export function * updateGoal (mutation, action) {
  let response
  var sendError = false
  console.log('==== updating partial goal ----- ::: ', action)
  try {
    PHANTOM.assertActionPayload(action)

    response = yield call(mutation, action)
  } catch (err) {
    console.log('error in calling addChild : ', err)
  }

  if (response && response.data) {
    console.log('----- udpate goal saga result ----- : ', response.data)
    let data = response.data['updateGoal']
    let goal = data['goal']

    let sproutid = data['sprout_id']
    let goalID = goal['goal_id']
    console.log('--- dispatching : ', sproutid, goalID, goal)
  } else {
    // console.log('-----inside error----- : ', response)
    sendError = true
  }

  if (sendError) {
    let error = {
      status: '402',
      code: 'testing error',
      message: 'no message yet'
    }
    console.log('sending error in goal saga :: ', response)
    // yield put(GoalActions.updateGoalFailure(error))
  }

}

export function * editGoal (api, action) {
  let response
  var sendError = false

  try {
    PHANTOM.assertActionPayload(action)

    // ---- STEP 1 -----
    // formulate payload
    let data = editGoalFormat(action)

    // ---- STEP 2 -----
    // send api request & received response
    response = yield call(api, data)

  } catch (err) {
    // console.log('ERROR in calling SAGA[Goal/EditGoal] :: ', err)
  }

  // if response is ok, send success event
  if (response && response.ok) {
    const {data} = response
    try {

      // ---- STEP 3 -----
      // dissect received data & check for required fields
      let storeData = editGoalDataDissector(data)

      // ---- STEP 4 -----
      // if payload is good, send success event
      yield put(GoalActions.editGoalSuccess(storeData))

    } catch (err) {
      // error can be generated by dissecting function
      // console.log('Error in editGoal response : ', err, data)

      // make sending error as true
      sendError = true
    }
  } else {
    sendError = true
  }

  // ---- STEP 4 -----
  // send failure event in case of error generated
  if (sendError) {
    let error = {
      status  : response && response.status,
      code    : response && response.data && response.data.code,
      message : response && response.data && response.data.message
    }
    yield put(GoalActions.editGoalFailure(error))
  }
}

export function * fetchDetail (query, action) {
  let response
  var sendError = false
  console.log(' --- fetching detail ---', action)
  try {
    response = yield call(query, action)
  } catch (err) {
    console.log(' errr in mutation transfer :: ', err)
  }

  if (response) {
    console.log('response in fetch goal detail saga ::: ', response)
    let goalData = response['data']['goal_detail']
    yield put(GoalActions.fetchGoalDetailSuccess(goalData))
  } else {
    sendError = true
  }

  if (sendError) {
    let error = {
      status: '402',
      code: 'fetching goal detail error',
      message: 'fetching goal detail error'
    }
    yield put(GoalActions.fetchGoalDetailFailure(error))
  }
}

export function * transfer (query, action) {
  let response, responseTwo
  var sendError = false
  let requests = []

  let onceOffInvestment = action[GOAL_ENTITIES.ONE_OFF_INVESTMENT]
  let recurringAmount = action[GOAL_ENTITIES.RECURRING_AMOUNT]

  if (recurringAmount) {
    let obj = {}
    obj[USER_ENTITIES.USER_ID] = action[USER_ENTITIES.USER_ID]
    obj[CHILD_ENTITIES.CHILD_ID] = action[CHILD_ENTITIES.CHILD_ID]
    obj[GOAL_ENTITIES.GID] = action[GOAL_ENTITIES.GID]
    obj[GOAL_ENTITIES.TRANSFER_AMOUNT] = action[GOAL_ENTITIES.RECURRING_AMOUNT]
    obj[GOAL_ENTITIES.RECURRING_FREQUENCY] = action[GOAL_ENTITIES.RECURRING_FREQUENCY]
    requests.push(obj)
  }
  if (onceOffInvestment) {
    let obj = {}
    obj[USER_ENTITIES.USER_ID] = action[USER_ENTITIES.USER_ID]
    obj[CHILD_ENTITIES.CHILD_ID] = action[CHILD_ENTITIES.CHILD_ID]
    obj[GOAL_ENTITIES.GID] = action[GOAL_ENTITIES.GID]
    obj[GOAL_ENTITIES.TRANSFER_AMOUNT] = action[GOAL_ENTITIES.ONE_OFF_INVESTMENT]
    obj[GOAL_ENTITIES.RECURRING_FREQUENCY] = FREQUENCY.ONCE
    requests.push(obj)
  }
  console.log(' --- transfer is initiated mate ---', requests)

  try {
    response = yield call(query, requests.pop())
  } catch (err) {
    console.log(' errr in mutation transfer :: ', err)
  }

  if (response) {
    console.log('TRANSFER SUCCESS :: ', response)

    // try second transfer
    if (requests.length > 0) {
      try {
        responseTwo = yield call(query, requests.pop())
      } catch (err) {
        console.log(' errr in mutation transfer second :: ', err)
      }

      if (responseTwo) {
        console.log('Second transfer success :: ', responseTwo)
        yield put(UserActions.fetchUserDetail(action[USER_ENTITIES.USER_ID], action[CHILD_ENTITIES.CHILD_IDs], action[COMMON_ENTITIES.NAVIGATOR], true))
      } else {
        yield put(UserActions.fetchUserDetail(action[USER_ENTITIES.USER_ID], action[CHILD_ENTITIES.CHILD_IDs], action[COMMON_ENTITIES.NAVIGATOR], true))
      }

      analytics.track({
        userId: action[USER_ENTITIES.USER_ID],
        event: SEGMENT_ACTIONS.TRANSFER_SUCCESS,
        properties: {}
      })

    } else {
      yield put(UserActions.fetchUserDetail(action[USER_ENTITIES.USER_ID], action[CHILD_ENTITIES.CHILD_IDs], action[COMMON_ENTITIES.NAVIGATOR], true))
    }
  } else {
    console.log('--transfer failure--')
    yield put(GoalActions.transferFailure())
    yield put(UserActions.fetchUserDetail(action[USER_ENTITIES.USER_ID], action[CHILD_ENTITIES.CHILD_IDs], action[COMMON_ENTITIES.NAVIGATOR], true))
  }
}

export function * fetchChartData (api, action) {
  let response
  var sendError = false

  try {
    // ---- STEP 1 -----
    // send api request & received response
    console.log('----- fetching chart data from saga ----- ', action, api)
    response = yield call(api, action)

  } catch (err) {
    // console.log('ERROR in calling SAGA[Goal/EditGoal] :: ', err)
  }

  // if response is ok, send success event
  if (response && response.ok) {
    console.log('response ::: ', response)
    let data = response['data']
    yield put(GoalActions.fetchGoalChartDataSuccess(action[GOAL_ENTITIES.GID], data))
  } else {
    console.log('response not ok :: ', response)
    sendError = true
  }

  // ---- STEP 4 -----
  // send failure event in case of error generated
  if (sendError) {
    let error = {
      status  : '401',
      code    : 'fetch goal chart data not good',
      message : 'fetch goal chart data not good'
    }
    yield put(GoalActions.fetchGoalChartDataFailure(error))
  }
}

export function * fetchUserTransfers (query, action) {
  let response
  var sendError = false

  try {
    // ---- STEP 1 -----
    // send api request & received response
    console.log('----- fetching user transfer from saga ----- ', action)
    response = yield call(query, action)

  } catch (err) {
    console.log('ERROR in calling SAGA[Goal/user Transfer] :: ', err)
  }

  // if response is ok, send success event
  if (response) {
    console.log('response ::: ', response)
    yield put(SettingActions.viewTransfersSuccess(response['data']))
  } else {
    console.log('response not ok :: ', response)
    sendError = true
  }

  // ---- STEP 4 -----
  // send failure event in case of error generated
  if (sendError) {
    let error = {
      status  : '401',
      code    : 'User Transfer Error',
      message : 'User Transfer Error'
    }
    yield put(SettingActions.viewTransfersFailure(error))
  }
}
